
	import numpy as np
	import matplotlib.pyplot as plt
	import numpy.fft as fft
	import matplotlib

	matplotlib.rcParams.update({'font.size':24})
	plt.rc('text',usetex = True)


	#DEFINE FUNCTIONS

	#initial Soln
	def initialSoln(x):
	# return np.sin(4.*np.pi*x)
	return np.sin(2.*np.pi*x)**10

	def analyticSoln(x,t):
	return initialSoln(x + t*np.ones_like(x))

	#DEFINE BASIC PROPERTIES

	a = 1.
	dx = 0.01
	dt =1.*dx
	imax = 101
	tmax = 4#seconds
	tmin = 0
	nmax = int((tmax-tmin)/(dt))


	#EMPTY ARRAYS
	x_vector = np.linspace(0.,1.,101)
	u0 = np.zeros(imax)
	uf = np.zeros(imax)
	u_analytic = np.zeros(imax)

	#CALCULATE INITIAL CONDITIONS

	uf = initialSoln(x_vector)


	##PLOT OF POWER SPECTRAL DENSITY

	yhat = fft.fft(uf)
	amplitude = np.real(yhat*np.conjugate(yhat))
	freq = x_vector*(2*np.pi) #beta delta x term = f
	plt.figure(1)
	plt.plot(freq[:50],amplitude[:50])

	## FOR DT = 0.5DX
	# plt.title('Power Spectral Density ' r'$U(x,0) = sin4\pi x $' '\tdt=0.5dx' )
	# plt.title('Power Spectral Density ' r'$U(x,0) = sin^{10} 2\pi x $' '\tdt=0.5dx')

	## FOR DT = DX
	# plt.title('Power Spectral Density ' r'$U(x,0) = sin4\pi x $' '\tdt=dx' )
	plt.title('Power Spectral Density ' r'$U(x,0) = sin^{10} 2\pi x $' '\tdt=dx')


	plt.xlabel('FREQUENCY')
	plt.ylabel('AMPLITUDE')


	#MAX PEAK
	fmax = freq[np.argmax(amplitude)]

	print(fmax)


	#START MAIN LOOP

	#time loop
	for t in range(nmax+1):


	#main finite difference loop
	for i in range(1,imax-1):
	u0[i] = (dt/(2.*dx))*(uf[i+1]-uf[i-1])+ 0.5*(uf[i+1]+uf[i-1])

	#populated analytical soln

	u_analytic =  analyticSoln(x_vector,(t+1)*dt)

	#embedding periodic BC
	u0[0] = (dt/(2.*dx))*(uf[1]-uf[imax-2])+ 0.5*(uf[1]+uf[imax-2])
	u0[imax-1] = u0[0]

	#updating uf
	uf = u0.copy()




	time = t*dt

	#quantitatively damping

	h_numerical = np.max(uf)-np.min(uf)
	h_real = np.max(u_analytic)-np.min(u_analytic)
	damping = h_numerical/h_real



	plt.figure(2)

	##FOR DT = 0.5DX
	# plt.title(r'$U(x,0) = sin4\pi x $' '\tat t = %f sec \t dt = 0.5dx '   %(time))
	# plt.title(r'$U(x,0) = sin^{10} 2\pi x $' '\tat t = %f sec \t dt = 0.5dx'   %(time))


	##FOR DT = DX
	# plt.title(r'$U(x,0) = sin4\pi x $' '\tat t = %f sec \t dt = dx '   %(time))
	plt.title(r'$U(x,0) = sin^{10} 2\pi x $' '\tat t = %f sec \t dt = dx'   %(time))

	plt.xlabel('X')
	plt.ylabel('U')
	plt.plot(x_vector,uf,'xb',label='NUMERICAL')
	plt.plot(x_vector,u_analytic,'r-',label='ANALYTICAL')
	plt.legend(loc=9,bbox_to_anchor=(0.90,1.0))
	plt.show()


	# print(1-damping)


	# theta = np.linspace(0,np.pi,101)
	# a = 1.
	# R = 0.5

	# c= a*(1-(theta**2)*(R**2 + 2.)/(12))

	# error = a - c

	# plt.plot(theta,error,label='R = 0.5')

	# plt.title('Errors in speed of propagation vs. Frequency')
	# plt.xlabel(r'$ \beta \Delta x $')
	# plt.ylabel('Error in speed propagation')

	# R = 1.0
	# c= a*(1-(theta**2)*(R**2 + 2.)/(12))

	# error = a - c

	# plt.hold

	# plt.plot(theta,error,label='R=1.0')

	# R = 0.25
	# c= a*(1-(theta**2)*(R**2 + 2.)/(12))

	# error = a - c

	# plt.hold

	# plt.plot(theta,error,label='R=0.25')
	# plt.legend()
	# plt.show()

